#version 150

uniform mat4 model;
uniform vec3 cameraPosition;

// material settings
uniform sampler2D materialTex;
uniform float materialShininess;
uniform vec3 materialSpecularColor;

uniform struct Light {
vec3 position;
vec3 intensities; //a.k.a the color of the light
float attenuation;
float ambientCoefficient;
} light;

in vec2 fragTexCoord;
in vec3 fragNormal;
in vec3 fragVert;

out vec4 finalColor;

void main() {
vec3 normal = normalize(transpose(inverse(mat3(model))) * fragNormal);
vec3 surfacePos = vec3(model * vec4(fragVert, 1));
vec4 surfaceColor = texture(materialTex, fragTexCoord);
vec3 surfaceToLight = normalize(light.position - surfacePos);
vec3 surfaceToCamera = normalize(cameraPosition - surfacePos);

//ambient
vec3 ambient = light.ambientCoefficient * surfaceColor.rgb * light.intensities;

//diffuse
float diffuseCoefficient = max(0.0, dot(normal, surfaceToLight));
vec3 diffuse = diffuseCoefficient * surfaceColor.rgb * light.intensities;

//specular
float specularCoefficient = 0.0;
if(diffuseCoefficient > 0.0)
specularCoefficient = pow(max(0.0, dot(surfaceToCamera, reflect(-surfaceToLight, normal))), materialShininess);
vec3 specular = specularCoefficient * materialSpecularColor * light.intensities;

//attenuation
float distanceToLight = length(light.position - surfacePos);
float attenuation = 1.0 / (1.0 + light.attenuation * pow(distanceToLight, 2));

//linear color (color before gamma correction)
vec3 linearColor = ambient + attenuation*(diffuse + specular);

//final color (after gamma correction)
vec3 gamma = vec3(1.0/2.2);

//cartoon
float intensity;
vec4 color;
intensity = light.ambientCoefficient + attenuation * (diffuseCoefficient + specularCoefficient);
//vec4(0.1,0.1,0.1,1.0);
if (intensity > 0.90) //r,g,b
color = vec4(0.1,0.1,0.1,0.0)+surfaceColor;
else if (intensity > 0.80)
color = vec4(0.0,0.0,0.0,0.0)+surfaceColor;
else if (intensity > 0.70)
color = -vec4(0.15,0.15,0.15,0.0)+surfaceColor;
else if (intensity > 0.50)
color = -vec4(0.3,0.3,0.3,0.0)+surfaceColor;
else if (intensity > 0.40)
color = -vec4(0.4,0.4,0.4,0.0)+surfaceColor;
else if (intensity > 0.30)
color = -vec4(0.55,0.55,0.55,0.0)+surfaceColor;
else
color = -vec4(0.7,0.7,0.7,0.0)+surfaceColor;
finalColor = color;
}
