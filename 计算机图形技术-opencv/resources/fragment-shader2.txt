#version 150

uniform mat4 model;
uniform vec3 cameraPosition;

// material settings
uniform sampler2D materialTex;
uniform float materialShininess;
uniform vec3 materialSpecularColor;

uniform struct Light {
vec3 position;
vec3 intensities; //a.k.a the color of the light
float attenuation;
float ambientCoefficient;
} light;

in vec2 fragTexCoord;
in vec3 fragNormal;
in vec3 fragVert;

out vec4 finalColor;

const int blursize = 4;

void main() {
vec3 normal = normalize(transpose(inverse(mat3(model))) * fragNormal);
vec3 surfacePos = vec3(model * vec4(fragVert, 1));
vec4 surfaceColor = texture(materialTex, fragTexCoord);
vec3 surfaceToLight = normalize(light.position - surfacePos);
vec3 surfaceToCamera = normalize(cameraPosition - surfacePos);

//ambient 环境光
vec3 ambient = light.ambientCoefficient * surfaceColor.rgb * light.intensities;

//diffuse 漫反射光
float diffuseCoefficient = max(0.0, dot(normal, surfaceToLight));
vec3 diffuse = diffuseCoefficient * surfaceColor.rgb * light.intensities;

//specular 镜面高光
float specularCoefficient = 0.0;
if(diffuseCoefficient > 0.0)
specularCoefficient = pow(max(0.0, dot(surfaceToCamera, reflect(-surfaceToLight, normal))), materialShininess);
vec3 specular = specularCoefficient * materialSpecularColor * light.intensities;

//attenuation
float distanceToLight = length(light.position - surfacePos);
float attenuation = 1.0 / (1.0 + light.attenuation * pow(distanceToLight, 2));

//linear color (color before gamma correction)
//vec3 linearColor = ambient + attenuation*(diffuse+specular);
vec3 linearColor = ambient + attenuation*diffuse*specular;

//final color
//finalColor = vec4(ambient + diffuse + specular, 1.0f);

float result = 0.0;
for (int x = 0; x < blursize; x++)
{
for (int y = 0; y < blursize; y++)
{
vec2 offset = (vec2(-2.0) + vec2(float(x), float(y))) * 2;
result += texture(materialTex, fragTexCoord + offset).b;
}
}
finalColor = result / vec4(blursize * blursize);
}
